
#include "DHT.h"
#define DHTPIN A0     // what pin we're connected to
#define DHTTYPE DHT22   // DHT 11 
DHT dht(DHTPIN, DHTTYPE);



#include <OneWire.h>
#include <DallasTemperature.h>

#define ONE_WIRE_BUS_0 2
OneWire oneWire_0(ONE_WIRE_BUS_0);
DallasTemperature sensores_0(&oneWire_0);

byte C_Devices[2]={0,0};
DeviceAddress _S[5]={ 0,0,0,0,0};


#include <SPI.h>
#include <Ethernet.h>
#define SDCARD_CS 4
#define _maxCicle 59

int _nsonda = 6;
int lightPin = A5;
int testPin = 8;

byte mac[] = {
  0x90, 0xA2, 0xDA, 0x10, 0x1E, 0x00 + _nsonda
};
IPAddress ip(192, 168, 1, 230 + _nsonda);
IPAddress Yun(192, 168, 1, 230);
// initialize the library instance:
EthernetClient client;
EthernetServer server(80);

volatile byte LCounterT = 0;
volatile byte LCounterH = 0;
volatile byte LCounterL = 0;
String outwww = "";

float Lecturas[6] = {0,0, 0};
float _old[3] = {0,0,0};
float Last[6] = {0, 0 , 0, 0, 0, 0};

byte addr[8];
float sum_adr;

String tipo_sonda = "SHT11";
float celsius, fahrenheit;
boolean _tx;

boolean lastConnected = false;                 // state of the connection last time through the main loop
unsigned long lastConnectionTime = 0;          // last time you connected to the server, in milliseconds
boolean ConnectionFail = false;                 // state of the connection last time through the main loop
boolean InitSonda = true;                 // state of the connection last time through the main loop

char buf[35] = "                                  ";

    #define NroDimmers   6
    int values[] = {    // set values channel output level (0 = 100%, 50 = 0%)
      0, // Output 0
      0, // output 1
      0, // output 2
      0, // output 3
      0, // output 4
      0, // output 5
      0, // output 6
      0, // output 7
    };

    int output [] = { // assign a pin for each channel.
      3, // Output 0
      5, // output 1
      6, // output 2
      9, // output 3
      4, // output 4
      7, // output 5
      0, // output 6
      0, // output 7
    };


float _t;

unsigned long getTime(){
   return millis();
}
  
void setup(void) {
  pinMode(testPin, OUTPUT);
  digitalWrite(testPin,LOW);
  
  Serial.begin(9600);
  
  //pinMode(SDCARD_CS,OUTPUT);
  //digitalWrite(SDCARD_CS,HIGH);//Deselect the SD card
  // give the ethernet module time to boot up:
  delay(5000);
  // start the Ethernet connection using a fixed IP address and DNS server:
  
  Ethernet.begin(mac,ip);
  // print the Ethernet board/shield's IP address:
  Serial.print("My IP address: ");
  Serial.println(Ethernet.localIP());
  server.begin();
  
  
  Serial.println("Open sensors");
  openSensors();
  Serial.println("OK");
  
  
  
  //  ds.reset_search();
  //  delay(250);
  //  if ( !ds.search(addr)) {
  //    dht.begin();
  //  }else{
  //    tipo_sonda = "DS18B20";   
   // }

  
  
  int c1=0;
  // Initialize the channel outputs (triacs)
  for (c1 = 0; c1 <= NroDimmers; c1++) {// we traverse the 8 channels to configure
    pinMode(output[c1], OUTPUT); // we associate each channel has a pin, which sets the output digital
    //lightOFF(output[c1]); // and we switch off the output
  } 
  //  clock.begin();
  lastConnectionTime = getTime();
}

void loop(){
  if (client.available()) {
    char c = client.read();
    Serial.print(c);
  }else{
    Serial.print(".");
    delay(900);
    digitalWrite(testPin,LOW);
    delay(100);
    digitalWrite(testPin,HIGH);
   // GetData();
  }

  if (!client.connected() && lastConnected) {
    Serial.println();
    Serial.println("disconnecting.");
    client.stop();
  }
//Read fail

 // www();
  lastConnected = client.connected();
}
//////////////////////////////////////////////////////////////////////////////////////
// rutinas de sensores
//
void openSensors() {
  openSensor(sensores_0 , 0);
  
}
void openSensor(DallasTemperature sensor, byte ix){
  //delay(200);

}
